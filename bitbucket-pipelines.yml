image: node:16


definitions: 
  steps:
    - step: &build
        name: Build and Test
        caches:
          - node
        script:
          - npm install
          # CI=true in default variables for Bitbucket Pipelines https://support.atlassian.com/bitbucket-cloud/docs/variables-in-pipelines/
          #- npm test
          - |
            GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            if [[ $GIT_BRANCH == "master" ]]; then
              npm run build -- --base-href /
            elif [[ $GIT_BRANCH == "stage_v3.0" ]]; then
              npm run build -- --base-href /v3.0/
            elif [[ $GIT_BRANCH == "stage_v3.1" ]]; then
              npm run build -- --base-href /v3.1/
            elif [[ $GIT_BRANCH == "stage_v3.2" ]]; then
              npm run build -- --base-href /v3.2/
            fi
        artifacts:
          - dist/sky-t/**

    - step: &test
        name: Security Scan
        script:
          # Run a security scan for sensitive data.
          # See more security tools at https://bitbucket.org/product/features/pipelines/integrations?&category=security
          - pipe: atlassian/git-secrets-scan:0.5.1

    - step: &deploy
        name: Deploy
        clone:
          enabled: false
        script:
          # sync your files to S3
          - pipe: atlassian/aws-s3-deploy:1.1.0
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              S3_BUCKET: $AWS_S3_BUCKET
              LOCAL_PATH: 'dist/sky-t'
          # triggering a distribution invalidation to refresh the CDN caches
          - pipe: atlassian/aws-cloudfront-invalidate:0.6.0
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              DISTRIBUTION_ID: $AWS_CF_DISTRIBUTION

pipelines:
  branches:
    master:
    - parallel:
      - step: *build
      - step: *test
    - step: 
        deployment: Production
        <<: *deploy
    stage_v3.0:
    - parallel:
      - step: *build
      - step: *test
    - step: 
        deployment: stage-v0
        <<: *deploy
    stage_v3.1:
    - parallel:
      - step: *build
      - step: *test
    - step: 
        deployment: stage-v1
        <<: *deploy
    stage_v3.2:
    - parallel:
      - step: *build
      - step: *test
    - step: 
        deployment: stage-v2
        <<: *deploy